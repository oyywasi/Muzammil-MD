const _0x120884 = _0xe15d
;(function (_0x5802c7, _0x8b4e92) {
  const _0x483cfc = _0xe15d,
    _0x3f07e7 = _0x5802c7()
  while (true) {
    try {
      const _0x4fd228 =
        (parseInt(_0x483cfc(585)) / 1) * (-parseInt(_0x483cfc(612)) / 2) +
        (parseInt(_0x483cfc(480)) / 3) * (-parseInt(_0x483cfc(409)) / 4) +
        -parseInt(_0x483cfc(588)) / 5 +
        parseInt(_0x483cfc(600)) / 6 +
        -parseInt(_0x483cfc(681)) / 7 +
        (-parseInt(_0x483cfc(559)) / 8) * (-parseInt(_0x483cfc(483)) / 9) +
        parseInt(_0x483cfc(406)) / 10
      if (_0x4fd228 === _0x8b4e92) {
        break
      } else {
        _0x3f07e7.push(_0x3f07e7.shift())
      }
    } catch (_0x200b58) {
      _0x3f07e7.push(_0x3f07e7.shift())
    }
  }
})(_0x55bf, 991447)
const {
    tlang,
    ringtone,
    smd,
    fetchJson,
    smdJson,
    Insta,
    getRandom,
    tiny,
    fancytext,
    yt,
    sleep,
    botpic,
    getBuffer,
    smdBuffer,
    pinterest,
    prefix,
    Config,
    mediafire,
    GDriveDl,
  } = require(_0x120884(440)),
  { search, download } = require(_0x120884(635)),
  googleTTS = require('google-tts-api'),
  ytdl = require(_0x120884(425)),
  yts = require('secktor-pack'),
  cheerio = require('cheerio'),
  fs = require(_0x120884(632)),
  axios = require(_0x120884(663)),
  fetch = require('node-fetch')
var videotime = 2000,
  dlsize = 400
const { cmd } = require(_0x120884(616))
smd(
  {
    pattern: 'tgs',
    desc: _0x120884(562),
    category: _0x120884(460),
    filename: __filename,
    use: '<add sticker url.>',
  },
  async (_0x19df48, _0x155c01) => {
    const _0xa0e382 = _0x120884
    try {
      if (!_0x155c01) {
        return await _0x19df48[_0xa0e382(662)](_0xa0e382(415))
      }
      if (!_0x155c01[_0xa0e382(443)](_0xa0e382(630))) {
        return await _0x19df48[_0xa0e382(662)](_0xa0e382(593))
      }
      let _0x2a4fb1 = _0x155c01[_0xa0e382(666)]('|')[0],
        _0x27aa70 = _0x2a4fb1[_0xa0e382(666)](_0xa0e382(501))[1],
        { result: _0x4a601d } = await fetchJson(
          _0xa0e382(638) + encodeURIComponent(_0x27aa70) + ' '
        ),
        _0x54b45a = _0x155c01[_0xa0e382(666)]('|')[1] || '',
        _0x56bec3 =
          'Total stickers: ' +
          _0x4a601d.stickers[_0xa0e382(578)] +
          '\n*Estimated complete in:* ' +
          _0x4a601d[_0xa0e382(686)][_0xa0e382(578)] * 1.5 +
          _0xa0e382(429)
      if (_0x4a601d[_0xa0e382(649)]) {
        return await _0x19df48[_0xa0e382(662)](
          'Animated stickers are not supported'
        )
      } else {
        if (_0x54b45a[_0xa0e382(398)](_0xa0e382(596))) {
          return await _0x19df48.reply(_0x56bec3)
        }
      }
      let _0x26c3a3 = parseInt(_0x54b45a[_0xa0e382(666)](',')[0]) || 10,
        _0x33784b = parseInt(_0x54b45a[_0xa0e382(666)](',')[1]) || 0,
        _0x4cca92 = _0x54b45a[_0xa0e382(666)](';')[1] || _0xa0e382(642),
        _0x3a6ece = true
      _0x4cca92[_0xa0e382(443)](_0xa0e382(464)) &&
        ((_0x3a6ece = false), (_0x4cca92 = 'Photo'))
      _0x26c3a3 > _0x4a601d.stickers[_0xa0e382(578)] &&
        (_0x26c3a3 = _0x4a601d.stickers[_0xa0e382(578)])
      _0x33784b > _0x4a601d[_0xa0e382(686)].length &&
        (_0x33784b = _0x4a601d[_0xa0e382(686)].length - 5)
      if (_0x33784b > _0x26c3a3) {
        let _0xe6592a = _0x26c3a3
        _0x26c3a3 = _0x33784b
        _0x33784b = _0xe6592a
      }
      await _0x19df48[_0xa0e382(662)](
        _0x56bec3 +
          _0xa0e382(447) +
          _0x4cca92 +
          _0xa0e382(601) +
          _0x33784b +
          '* to *' +
          _0x26c3a3 +
          _0xa0e382(541) +
          _0x2a4fb1 +
          ' |  10 ,  20 ; photo'
      )
      for (_0x33784b; _0x33784b < _0x26c3a3; _0x33784b++) {
        let _0x4de16f = await fetchJson(
            _0xa0e382(498) + _0x4a601d[_0xa0e382(686)][_0x33784b].file_id
          ),
          _0x3c2608 =
            'https://api.telegram.org/file/bot891038791:AAHWB1dQd-vi0IbH2NjKYUk-hqQ8rQuzPD4/' +
            _0x4de16f[_0xa0e382(405)][_0xa0e382(466)]
        if (_0x3a6ece) {
          let _0x13ee38 = await getBuffer(_0x3c2608)
          await _0x19df48.reply(
            _0x13ee38,
            {
              packname: Config[_0xa0e382(620)],
              author: 'HITDEV-MD',
            },
            _0xa0e382(557)
          )
        } else {
          await _0x19df48[_0xa0e382(499)][_0xa0e382(604)](
            _0x19df48[_0xa0e382(435)],
            {
              image: { url: _0x3c2608 },
              caption:
                '*_Telegram Sticker At Index ' +
                (_0x33784b + 1) +
                _0xa0e382(665),
            }
          )
        }
      }
    } catch (_0x5a840a) {
      await _0x19df48[_0xa0e382(685)](
        _0x5a840a + _0xa0e382(641),
        _0x5a840a,
        '*_Error Sending telegram stickers!!!_*'
      )
    }
  }
)
smd(
  {
    pattern: 'wikimedia',
    desc: 'Downloads wikimedia images.',
    category: _0x120884(460),
    filename: __filename,
    use: '<text|search.>',
  },
  async (_0x47fb55, _0x5614e8) => {
    const _0x480c84 = _0x120884
    try {
      if (!_0x5614e8) {
        return await _0x47fb55.send(_0x480c84(434))
      }
      let { wikimedia: _0x168a95 } = require(_0x480c84(440)),
        _0x6c377e = (await _0x168a95(_0x5614e8)) || []
      if (!_0x6c377e || !_0x6c377e[0]) {
        return await _0x47fb55.send(_0x480c84(497))
      }
      let _0xc4fe0 =
        _0x47fb55[_0x480c84(508)] &&
        _0x5614e8[_0x480c84(666)]('|')[1] === _0x480c84(653)
          ? _0x6c377e[_0x480c84(578)]
          : _0x6c377e.length > 5
          ? 5
          : _0x6c377e[_0x480c84(578)]
      for (let _0xfe1387 = 0; _0xfe1387 < _0xc4fe0; _0xfe1387++) {
        try {
          _0x47fb55[_0x480c84(499)].sendFromUrl(
            _0x47fb55[_0x480c84(625)],
            _0x6c377e[_0xfe1387][_0x480c84(395)],
            _0x480c84(551) +
              _0x6c377e[_0xfe1387][_0x480c84(597)] +
              _0x480c84(552) +
              _0x6c377e[_0xfe1387].source,
            _0x47fb55,
            {},
            _0x480c84(395)
          )
        } catch {}
      }
    } catch (_0x289d8e) {
      await _0x47fb55[_0x480c84(685)](_0x289d8e + _0x480c84(583), _0x289d8e)
    }
  }
)
smd(
  {
    pattern: _0x120884(436),
    alias: ['fb', _0x120884(468)],
    desc: 'Downloads fb videos.',
    category: _0x120884(460),
    filename: __filename,
    use: _0x120884(469),
  },
  async (_0x3a3af2, _0x5f4e7a) => {
    const _0x304ee1 = _0x120884
    try {
      let _0xef90cc = _0x5f4e7a.split(' ')[0][_0x304ee1(563)]()
      if (!_0xef90cc || !_0xef90cc[_0x304ee1(398)](_0x304ee1(631))) {
        return await _0x3a3af2[_0x304ee1(655)](
          '*_Please Give me Facebook Video Url_*\n*Example _' +
            prefix +
            _0x304ee1(548)
        )
      }
      let _0x3f4693 = await smdJson(api_smd + _0x304ee1(422) + _0xef90cc)
      if (!_0x3f4693 || !_0x3f4693[_0x304ee1(518)]) {
        return await _0x3a3af2.reply('*Invalid Video Url!*')
      }
      return await _0x3a3af2[_0x304ee1(499)][_0x304ee1(604)](
        _0x3a3af2[_0x304ee1(435)],
        {
          video: { url: _0x3f4693.result[_0x304ee1(582)][0].url },
          caption: Config[_0x304ee1(633)],
        },
        { quoted: _0x3a3af2 }
      )
    } catch (_0x2c7814) {
      await _0x3a3af2[_0x304ee1(685)](
        _0x2c7814 + '\n\ncommand: facebook',
        _0x2c7814,
        _0x304ee1(575)
      )
    }
  }
)
smd(
  {
    pattern: 'apk',
    alias: ['modapk'],
    desc: _0x120884(688),
    category: _0x120884(460),
    filename: __filename,
    use: _0x120884(684),
  },
  async (_0x7b09ff, _0x4af114) => {
    const _0x18ec84 = _0x120884
    try {
      if (!_0x4af114) {
        return _0x7b09ff[_0x18ec84(662)](_0x18ec84(536))
      }
      let _0x468cc8 = await search(_0x4af114),
        _0x538b40 = {}
      if (_0x468cc8[_0x18ec84(578)]) {
        _0x538b40 = await download(_0x468cc8[0].id)
      } else {
        return _0x7b09ff[_0x18ec84(662)](_0x18ec84(672))
      }
      const _0x48bc12 = parseInt(_0x538b40[_0x18ec84(606)])
      if (_0x48bc12 > 200) {
        return _0x7b09ff.reply(_0x18ec84(492))
      }
      const _0x31321c = _0x538b40.dllink
      let _0x24f726 = await fancytext(
        _0x18ec84(521) +
          _0x538b40.name +
          _0x18ec84(660) +
          _0x538b40[_0x18ec84(542)] +
          _0x18ec84(453) +
          _0x538b40[_0x18ec84(607)] +
          _0x18ec84(614) +
          _0x538b40[_0x18ec84(606)] +
          _0x18ec84(579) +
          Config.caption,
        25
      )
      const _0x3e266b =
          (_0x538b40?.[_0x18ec84(537)] || _0x18ec84(677)) + _0x18ec84(432),
        _0x585f79 = 'temp/' + _0x3e266b
      let _0x533c85 = await _0x7b09ff[_0x18ec84(662)](
        _0x538b40[_0x18ec84(515)],
        { caption: _0x24f726 },
        _0x18ec84(610),
        _0x7b09ff
      )
      axios[_0x18ec84(509)](_0x31321c, { responseType: _0x18ec84(477) })
        [_0x18ec84(556)]((_0x3cdb1d) => {
          const _0x4d19ee = _0x18ec84,
            _0x406256 = fs[_0x4d19ee(623)](_0x585f79)
          return (
            _0x3cdb1d.data[_0x4d19ee(577)](_0x406256),
            new Promise((_0xd7f976, _0x27915) => {
              const _0x25ab08 = _0x4d19ee
              _0x406256.on('finish', _0xd7f976)
              _0x406256.on(_0x25ab08(685), _0x27915)
            })
          )
        })
        [_0x18ec84(556)](() => {
          const _0x47dcef = _0x18ec84
          let _0x389371 = {
            document: fs[_0x47dcef(438)](_0x585f79),
            mimetype: 'application/vnd.android.package-archive',
            fileName: _0x3e266b,
          }
          _0x7b09ff[_0x47dcef(499)][_0x47dcef(604)](
            _0x7b09ff[_0x47dcef(428)],
            _0x389371,
            { quoted: _0x533c85 }
          )
          try {
            fs[_0x47dcef(584)](_0x585f79)
          } catch {}
        })
        .catch((_0x2490b5) => {
          const _0x229589 = _0x18ec84
          try {
            fs[_0x229589(584)](_0x585f79)
          } catch {}
          _0x7b09ff[_0x229589(662)](_0x229589(457))
        })
    } catch (_0x4540ef) {
      await _0x7b09ff[_0x18ec84(685)](
        _0x4540ef + _0x18ec84(622),
        _0x4540ef,
        _0x18ec84(678)
      )
    }
  }
)
cmd(
  {
    pattern: _0x120884(408),
    alias: [_0x120884(566)],
    desc: 'Search App',
    category: 'downloader',
    filename: __filename,
    use: _0x120884(530),
  },
  async (_0x19d516, _0x1cb962) => {
    const _0x34faad = _0x120884
    try {
      if (!_0x1cb962) {
        return await _0x19d516[_0x34faad(662)](
          '*_Uhh pLease, give me app name!_*'
        )
      }
      const _0x4ac8f2 = await search(_0x1cb962)
      if (_0x4ac8f2[_0x34faad(578)]) {
        let _0x3d85b = await download(_0x4ac8f2[0].id),
          _0x307e6f = _0x34faad(454) + _0x1cb962 + _0x34faad(448)
        for (
          let _0x5a5920 = 0;
          _0x5a5920 < _0x4ac8f2[_0x34faad(578)];
          _0x5a5920++
        ) {
          _0x307e6f +=
            '\n*' +
            (_0x5a5920 + 1) +
            ' : ' +
            _0x4ac8f2[_0x5a5920].name +
            _0x34faad(670) +
            _0x4ac8f2[_0x5a5920].id +
            _0x34faad(565)
        }
        return await _0x19d516[_0x34faad(604)](
          _0x19d516[_0x34faad(435)],
          {
            image: { url: _0x3d85b.icon },
            caption: _0x307e6f,
          },
          { quoted: _0x19d516 }
        )
      } else {
        return _0x19d516[_0x34faad(662)](_0x34faad(433))
      }
    } catch (_0xa7fd60) {
      _0x19d516[_0x34faad(685)](_0xa7fd60 + _0x34faad(550), _0xa7fd60)
    }
  }
)
smd(
  {
    pattern: _0x120884(449),
    desc: _0x120884(688),
    category: _0x120884(460),
    filename: __filename,
    use: _0x120884(684),
  },
  async (_0x1ae8f8, _0x1c586e) => {
    const _0x278d33 = _0x120884
    try {
      let _0x59e849 = _0x1c586e
        ? _0x1c586e
        : _0x1ae8f8[_0x278d33(643)]
        ? _0x1ae8f8.reply_message[_0x278d33(595)]
        : ''
      if (!_0x1c586e) {
        return await _0x1ae8f8[_0x278d33(662)](
          '*Provide Repo Url, _.gitclone https://github.com/HITDeveloper2023/HITDEV-MD_*'
        )
      }
      if (
        !/(?:https|git)(?::\/\/|@)github\.com[\/:]([^\/:]+)\/(.+)/i[
          _0x278d33(416)
        ](_0x1c586e)
      ) {
        return await _0x1ae8f8[_0x278d33(662)]('*Provide Valid Repositry Url*')
      }
      let [_0x3b1b37, _0x2f1dcc, _0x83a6d7] =
        _0x1c586e.match(
          /(?:https|git)(?::\/\/|@)github\.com[\/:]([^\/:]+)\/(.+)/i
        ) || []
      _0x83a6d7 = _0x83a6d7.replace(/.git$/, '')
      let _0x3e5a6d =
          'https://api.github.com/repos/' +
          _0x2f1dcc +
          '/' +
          _0x83a6d7 +
          '/zipball',
        _0x2cb6ba = (await fetch(_0x3e5a6d, { method: 'HEAD' })).headers[
          _0x278d33(509)
        ](_0x278d33(532)).match(/attachment; filename=(.*)/)[1]
      await _0x1ae8f8[_0x278d33(499)][_0x278d33(604)](
        _0x1ae8f8[_0x278d33(428)],
        {
          document: { url: _0x3e5a6d },
          fileName: _0x2cb6ba,
          mimetype: _0x278d33(553),
        }
      )
    } catch (_0x982fee) {
      return _0x1ae8f8[_0x278d33(685)](
        _0x982fee + _0x278d33(450),
        _0x982fee,
        _0x278d33(650)
      )
    }
  }
)
const ytIdRegex =
  /(?:http(?:s|):\/\/|)(?:(?:www\.|)youtube(?:\-nocookie|)\.com\/(?:watch\?.*(?:|\&)v=|embed|shorts\/|v\/)|youtu\.be\/)([-_0-9A-Za-z]{11})/
function _0xe15d(_0x530fa9, _0x22854e) {
  const _0x55bfa0 = _0x55bf()
  _0xe15d = function (_0xe15d86, _0x1b4670) {
    _0xe15d86 = _0xe15d86 - 395
    let _0x14ed16 = _0x55bfa0[_0xe15d86]
    return _0x14ed16
  }
  return _0xe15d(_0x530fa9, _0x22854e)
}
smd(
  {
    pattern: _0x120884(572),
    desc: 'text to speech.',
    category: _0x120884(460),
    filename: __filename,
    use: '<Hii,this is Hitdev>',
  },
  async (_0x55aba2, _0x56da6b) => {
    const _0x296f93 = _0x120884
    try {
      let _0x204f81 = _0x55aba2[_0x296f93(659)]
        ? _0x55aba2[_0x296f93(659)]
        : _0x56da6b
      if (!_0x204f81) {
        return _0x55aba2[_0x296f93(662)](_0x296f93(444))
      }
      try {
        let _0x1974d5 = _0x56da6b
          ? _0x56da6b[_0x296f93(666)](' ')[0][_0x296f93(461)]()
          : 'en'
        const _0x18d003 = googleTTS[_0x296f93(658)](_0x204f81, {
          lang: _0x1974d5,
          slow: true,
          host: _0x296f93(687),
        })
        await _0x55aba2[_0x296f93(499)][_0x296f93(604)](
          _0x55aba2[_0x296f93(428)],
          {
            audio: { url: _0x18d003 },
            mimetype: _0x296f93(506),
            ptt: true,
            fileName: 'HITDEV-MD-tts.m4a',
          },
          { quoted: _0x55aba2 }
        )
      } catch (_0x3537cb) {
        const _0x5596bc = googleTTS[_0x296f93(658)](_0x204f81, {
          lang: 'en',
          slow: true,
          host: 'https://translate.google.com',
        })
        await _0x55aba2[_0x296f93(499)][_0x296f93(604)](
          _0x55aba2[_0x296f93(428)],
          {
            audio: { url: _0x5596bc },
            mimetype: 'audio/mpeg',
            ptt: true,
            fileName: _0x296f93(545),
          },
          { quoted: _0x55aba2 }
        )
      }
    } catch (_0x1313db) {
      return _0x55aba2.error(_0x1313db + _0x296f93(567), _0x1313db, false)
    }
  }
)
smd(
  {
    pattern: _0x120884(526),
    alias: ['mp4down', _0x120884(543)],
    desc: 'download mp4 from url.',
    category: 'downloader',
    use: _0x120884(592),
    filename: __filename,
  },
  async (_0x272f8d, _0x3c482f) => {
    const _0x29ca34 = _0x120884
    try {
      let _0x53783b = ('' + (_0x3c482f ? _0x3c482f : _0x272f8d.reply_text))
        [_0x29ca34(666)](' ')[0]
        [_0x29ca34(461)]()
        [_0x29ca34(563)]()
      if (
        !_0x53783b ||
        !_0x53783b[_0x29ca34(461)]()[_0x29ca34(398)](_0x29ca34(626))
      ) {
        return _0x272f8d[_0x29ca34(662)](
          _0x29ca34(615) + prefix + _0x29ca34(490)
        )
      }
      var _0x1e4a34 = _0x3c482f[_0x29ca34(461)]()[_0x29ca34(443)](
        _0x29ca34(639)
      )
        ? _0x29ca34(495)
        : 'video'
      await _0x272f8d[_0x29ca34(499)].sendMessage(
        _0x272f8d[_0x29ca34(435)],
        {
          [_0x1e4a34]: { url: _0x53783b },
          caption: _0x29ca34(636),
          contextInfo: {
            ...(await _0x272f8d[_0x29ca34(499)].contextInfo(
              Config[_0x29ca34(504)],
              _0x272f8d[_0x29ca34(484)]
            )),
          },
        },
        { quoted: _0x272f8d }
      )
    } catch (_0x2306b6) {
      await _0x272f8d.error(
        _0x2306b6 + '\n\ncommand : downmp4',
        _0x2306b6,
        _0x29ca34(580)
      )
    }
  }
)
smd(
  {
    pattern: 'video',
    desc: _0x120884(676),
    category: _0x120884(460),
    filename: __filename,
    use: '<faded-Alan Walker>',
  },
  async (_0xe5ea97, _0x36bc71) => {
    const _0x3ceca4 = _0x120884
    let _0x54713e = _0x36bc71 ? _0x36bc71 : _0xe5ea97[_0x3ceca4(659)]
    var _0x5b10f0 = _0x36bc71[_0x3ceca4(461)]().includes('doc')
      ? 'document'
      : _0x3ceca4(462)
    if (!_0x54713e) {
      return _0xe5ea97.reply(_0x3ceca4(463) + prefix + _0x3ceca4(511))
    }
    let _0x421809 = ytIdRegex[_0x3ceca4(628)](_0x36bc71) || [],
      _0x35c755 = _0x421809[0] || false
    try {
      if (!_0x35c755) {
        let _0x588f03 = await yts(_0x54713e),
          _0x525771 = _0x588f03[_0x3ceca4(524)][0]
        _0x35c755 = _0x525771[_0x3ceca4(527)]
        _0x421809 = ytIdRegex[_0x3ceca4(628)](_0x35c755)
      }
    } catch {}
    try {
      let _0x1df0ed = await ytdl.getInfo(_0x35c755),
        _0x5c8a7c = Math[_0x3ceca4(471)](i[_0x3ceca4(561)] * 60)
      _0x5c8a7c >= videotime && (_0x5b10f0 = _0x3ceca4(495))
      let _0x56042a = _0x1df0ed[_0x3ceca4(407)].title,
        _0x5d70e6 = _0x3ceca4(472) + _0x421809[1] + _0x3ceca4(417)
      const _0x4195ce = ytdl(_0x35c755, {
        filter: (_0x4f303f) =>
          _0x4f303f[_0x3ceca4(403)] == 22 || _0x4f303f.itag == 18,
      })[_0x3ceca4(577)](fs[_0x3ceca4(623)](_0x5d70e6))
      await new Promise((_0x3fc982, _0x3a9fa6) => {
        const _0x4dccb0 = _0x3ceca4
        _0x4195ce.on(_0x4dccb0(685), _0x3a9fa6)
        _0x4195ce.on(_0x4dccb0(400), _0x3fc982)
      })
      var _0x3048ab = {
        ...(await _0xe5ea97.bot[_0x3ceca4(517)](
          Config[_0x3ceca4(504)],
          _0x3ceca4(523)
        )),
      }
      let _0x3d0cf7 = {
        [_0x5b10f0]: fs[_0x3ceca4(438)](_0x5d70e6),
        mimetype: _0x3ceca4(611),
        fileName: _0x56042a,
        caption: Config.caption,
        contextInfo: _0x3048ab,
      }
      await _0xe5ea97.bot[_0x3ceca4(604)](_0xe5ea97.jid, _0x3d0cf7, {
        quoted: _0xe5ea97,
      })
      try {
        fs[_0x3ceca4(594)](_0x5d70e6)
      } catch {}
    } catch (_0x6c0641) {
      console[_0x3ceca4(560)]('ytdl Download video error:', _0x6c0641)
      try {
        let _0x4e4465 = await yt[_0x3ceca4(673)](_0x421809[1])
        _0x4e4465[_0x3ceca4(445)] >= videotime && (_0x5b10f0 = _0x3ceca4(495))
        let _0x3d6d42 = {
            type: _0x3ceca4(462),
            quality: _0x4e4465.pref_Quality || _0x3ceca4(414),
            format: _0x3ceca4(452),
          },
          _0x3e3caf = await yt[_0x3ceca4(485)](_0x421809[1], _0x3d6d42)
        var _0x3048ab = {
          ...(await _0xe5ea97[_0x3ceca4(499)][_0x3ceca4(517)](
            Config[_0x3ceca4(504)],
            'ᴠɪᴅᴇᴏ ᴅᴏᴡɴʟᴏᴀᴅᴇʀ'
          )),
        }
        let _0x3448d2 =
          _0x4e4465[_0x3ceca4(597)] ||
          _0x3e3caf ||
          _0x421809[1] ||
          _0x3ceca4(481)
        _0x3e3caf
          ? await _0xe5ea97[_0x3ceca4(499)][_0x3ceca4(604)](
              _0xe5ea97[_0x3ceca4(435)],
              {
                [_0x5b10f0]: { url: _0x3e3caf },
                fileName: _0x3448d2,
                caption: Config[_0x3ceca4(633)],
                mimetype: _0x3ceca4(611),
                contextInfo: _0x3048ab,
              }
            )
          : await _0xe5ea97[_0x3ceca4(655)]('Video not Found')
        try {
          fs[_0x3ceca4(594)]('' + _0x3e3caf)
        } catch {}
      } catch (_0x55db8f) {
        return _0xe5ea97[_0x3ceca4(685)](
          _0x55db8f + _0x3ceca4(648),
          _0x55db8f,
          _0x3ceca4(451)
        )
      }
    }
  }
)
smd(
  {
    pattern: _0x120884(413),
    desc: _0x120884(676),
    category: 'downloader',
    filename: __filename,
    use: '<faded-Alan Walker>',
  },
  async (_0xf4a47, _0x5af7a0) => {
    const _0xe0419 = _0x120884
    let _0x51cced = _0x5af7a0 ? _0x5af7a0 : _0xf4a47.reply_text
    if (!_0x51cced) {
      return _0xf4a47[_0xe0419(662)]('Example : ' + prefix + _0xe0419(656))
    }
    var _0x5cbfdb = _0x51cced[_0xe0419(461)]()[_0xe0419(443)]('doc')
      ? 'document'
      : _0xe0419(462)
    let _0x45b86d = ytIdRegex[_0xe0419(628)](_0x5af7a0) || [],
      _0x1b8dbb = _0x45b86d[0] || false
    try {
      if (!_0x1b8dbb) {
        let _0x39917e = await yts(_0x51cced),
          _0x4edc53 = _0x39917e.videos[0]
        _0x1b8dbb = _0x4edc53[_0xe0419(527)]
        _0x45b86d = ytIdRegex[_0xe0419(628)](_0x1b8dbb)
      }
    } catch {}
    try {
      let _0x158918 = await yt[_0xe0419(673)](_0x45b86d[1]),
        _0x355f66 = {
          type: _0xe0419(462),
          quality: _0x158918.pref_Quality || _0xe0419(414),
          format: _0xe0419(452),
        }
      _0x158918[_0xe0419(445)] >= videotime && (_0x5cbfdb = 'document')
      let _0x2b6ac2 = await yt.download(_0x45b86d[1], _0x355f66),
        _0x10f021 = _0x158918.title || _0x2b6ac2 || _0x45b86d[1]
      var _0x1e7392 = {
        ...(await _0xf4a47[_0xe0419(499)][_0xe0419(517)](
          Config[_0xe0419(504)],
          _0xe0419(523)
        )),
      }
      _0x2b6ac2
        ? await _0xf4a47[_0xe0419(499)][_0xe0419(604)](_0xf4a47.chat, {
            [_0x5cbfdb]: { url: _0x2b6ac2 },
            fileName: _0x10f021,
            caption: Config[_0xe0419(633)],
            mimetype: 'video/mp4',
            contextInfo: _0x1e7392,
          })
        : await _0xf4a47[_0xe0419(655)]('Video not Found')
      try {
        fs[_0xe0419(594)]('' + _0x2b6ac2)
      } catch {}
    } catch (_0x1257db) {
      return _0xf4a47.error(
        _0x1257db + _0xe0419(648),
        _0x1257db,
        '*_Video not Found_*'
      )
    }
  }
)
smd(
  {
    pattern: _0x120884(605),
    alias: ['music'],
    desc: _0x120884(446),
    category: _0x120884(460),
    filename: __filename,
    use: _0x120884(525),
  },
  async (_0x54463e, _0x1f76d0) => {
    const _0x5a627b = _0x120884
    try {
      let _0x25d045 = _0x1f76d0 ? _0x1f76d0 : _0x54463e[_0x5a627b(659)]
      var _0x2e913a = _0x25d045[_0x5a627b(461)]()[_0x5a627b(443)](
        _0x5a627b(639)
      )
        ? _0x5a627b(495)
        : _0x5a627b(491)
      if (!_0x25d045) {
        return _0x54463e[_0x5a627b(662)]('*' + prefix + _0x5a627b(500))
      }
      let _0x2eca3d = ytIdRegex[_0x5a627b(628)](_0x25d045) || [],
        _0xb6fd2d = _0x2eca3d[0] || false
      if (!_0xb6fd2d) {
        let _0x4bcf6d = await yts(_0x25d045),
          _0xa244ed = _0x4bcf6d[_0x5a627b(524)][0]
        _0xb6fd2d = _0xa244ed[_0x5a627b(527)]
      }
      _0x2eca3d = ytIdRegex[_0x5a627b(628)](_0xb6fd2d) || []
      let _0x6845ab = await yt.getInfo(_0x2eca3d[1]),
        _0x516e89 = _0x6845ab[_0x5a627b(597)] || _0x37323e || _0x2eca3d[1]
      if (_0x6845ab && _0x6845ab[_0x5a627b(445)] >= videotime) {
        return await _0x54463e[_0x5a627b(662)](_0x5a627b(507))
      }
      await _0x54463e[_0x5a627b(655)]('_Downloading ' + _0x6845ab.title + '?_')
      let _0x37323e = await yt[_0x5a627b(485)](_0x2eca3d[1], {
        type: _0x5a627b(491),
        quality: _0x5a627b(414),
      })
      var _0x28302f = {
        ...(await _0x54463e[_0x5a627b(499)].contextInfo(
          Config[_0x5a627b(504)],
          'ꜱᴏɴɢ ᴅᴏᴡɴʟᴏᴀᴅᴇʀ'
        )),
      }
      _0x37323e
        ? await _0x54463e.bot[_0x5a627b(604)](_0x54463e.jid, {
            [_0x2e913a]: { url: _0x37323e },
            fileName: _0x516e89,
            mimetype: 'audio/mpeg',
            contextInfo: _0x28302f,
          })
        : _0x54463e[_0x5a627b(655)](_0x5a627b(451))
      try {
        fs.unlinkSync(_0x37323e)
      } catch {}
    } catch (_0x593953) {
      return _0x54463e.error(
        _0x593953 + '\n\ncommand: play',
        _0x593953,
        '*_Video not Found_*'
      )
    }
  }
)
smd(
  {
    pattern: _0x120884(680),
    desc: _0x120884(544),
    category: 'downloader',
    filename: __filename,
    use: _0x120884(456),
  },
  async (_0x2ee3dd, _0x20a520) => {
    const _0x4334ba = _0x120884
    try {
      if (!_0x20a520) {
        return _0x2ee3dd[_0x4334ba(662)](
          _0x4334ba(646) + prefix + _0x4334ba(397)
        )
      }
      const _0x19c223 = parseInt(_0x20a520)
      if (
        _0x19c223[_0x4334ba(458)]() == _0x4334ba(426) ||
        _0x19c223 < 1 ||
        _0x19c223 > 160
      ) {
        return _0x2ee3dd[_0x4334ba(662)](_0x4334ba(533))
      }
      let _0xf0331a = _0x4334ba(431) + _0x19c223.toString() + _0x4334ba(478),
        _0x2ba501 = await getBuffer(_0xf0331a)
      var _0x29fdd9 = {
        ...(await _0x2ee3dd.bot[_0x4334ba(517)](
          Config.botname,
          _0x4334ba(671) + _0x19c223
        )),
      }
      let _0x4737bb = {
        audio: _0x2ba501,
        fileName: _0x4334ba(467) + _0x19c223 + '.m4a',
        mimetype: 'audio/mpeg',
        ptt: true,
        contextInfo: _0x29fdd9,
      }
      return _0x2ee3dd[_0x4334ba(499)][_0x4334ba(604)](
        _0x2ee3dd.chat,
        _0x4737bb,
        { quoted: _0x2ee3dd }
      )
    } catch (_0x223ebb) {
      return _0x2ee3dd[_0x4334ba(685)](
        _0x223ebb + '\n\ncommand: sound',
        _0x223ebb,
        false
      )
    }
  }
)
smd(
  {
    pattern: _0x120884(657),
    alias: ['tt', _0x120884(420)],
    desc: _0x120884(569),
    category: _0x120884(460),
    filename: __filename,
    use: _0x120884(439),
  },
  async (_0x3050b9, _0x3dfcd0) => {
    const _0x333b4c = _0x120884
    try {
      var _0x3f5fb9 = _0x3dfcd0.toLowerCase()[_0x333b4c(443)](_0x333b4c(639))
        ? _0x333b4c(495)
        : _0x3dfcd0.toLowerCase()[_0x333b4c(443)](_0x333b4c(455))
        ? _0x333b4c(491)
        : _0x333b4c(462)
      if (!_0x3dfcd0) {
        return await _0x3050b9[_0x333b4c(662)](
          _0x333b4c(442) +
            prefix +
            'tiktok https://www.tiktok.com/@dakwahmuezza/video/7150544062221749531_*'
        )
      }
      let _0x149d79 = _0x3dfcd0 ? _0x3dfcd0[_0x333b4c(666)](' ')[0] : ''
      if (!/tiktok/[_0x333b4c(416)](_0x149d79)) {
        return await _0x3050b9[_0x333b4c(662)](_0x333b4c(564))
      }
      var _0x3200a7 = false
      try {
        let _0x410534 = await smdJson(api_smd + '/api/ttdl2?url=' + _0x149d79)
        _0x3200a7 =
          (_0x410534 && _0x410534?[_0x333b4c(462)]?.[_0x333b4c(399)]) || false
      } catch (_0x4f63b7) {
        let _0x44d97e = await smdJson(api_smd + _0x333b4c(603) + _0x149d79)
        _0x3200a7 =
          (_0x44d97e && _0x44d97e?[_0x333b4c(405)]?.[_0x333b4c(462)]) || false
      }
      if (_0x3200a7) {
        return await _0x3050b9[_0x333b4c(655)](
          _0x3200a7,
          { caption: Config[_0x333b4c(633)] },
          _0x3f5fb9,
          _0x3050b9
        )
      } else {
        return await _0x3050b9[_0x333b4c(662)](_0x333b4c(573))
      }
    } catch (_0x336a8b) {
      return _0x3050b9[_0x333b4c(685)](
        _0x336a8b + '\n\ncommand: tiktok',
        _0x336a8b
      )
    }
  }
)
smd(
  {
    pattern: _0x120884(401),
    desc: 'Downloads ringtone.',
    category: 'downloader',
    filename: __filename,
    use: _0x120884(418),
  },
  async (_0x1da3da, _0x2f0451) => {
    const _0x32df6b = _0x120884
    try {
      if (!_0x2f0451) {
        return _0x1da3da[_0x32df6b(662)](
          _0x32df6b(609) + prefix + _0x32df6b(647)
        )
      }
      const { ringtone: _0x2ec04e } = require(_0x32df6b(534))
      let _0x5f35d4 = await _0x2ec04e(_0x2f0451)
      var _0x2e165b = {
        ...(await _0x1da3da[_0x32df6b(499)].contextInfo(
          Config[_0x32df6b(504)],
          _0x32df6b(539)
        )),
      }
      let _0x5c9751 = {
        audio: { url: _0x5f35d4[0][_0x32df6b(491)] },
        caption: '*' + _0x5f35d4[0].title + '*',
        fileName: _0x5f35d4[0][_0x32df6b(597)] + _0x32df6b(478),
        mimetype: _0x32df6b(506),
        contextInfo: _0x2e165b,
      }
      return _0x1da3da.bot[_0x32df6b(604)](
        _0x1da3da[_0x32df6b(428)],
        _0x5c9751,
        { quoted: _0x1da3da }
      )
    } catch (_0x430a86) {
      return _0x1da3da[_0x32df6b(685)](
        _0x430a86 + _0x32df6b(475),
        _0x430a86,
        _0x32df6b(424)
      )
    }
  }
)
smd(
  {
    pattern: _0x120884(473),
    alias: ['pinterest'],
    desc: _0x120884(621),
    category: _0x120884(460),
    filename: __filename,
    use: _0x120884(512),
  },
  async (_0xf8b0b, _0x589f9c) => {
    const _0x210608 = _0x120884
    try {
      if (!_0x589f9c) {
        return _0xf8b0b[_0x210608(662)]('What picture are you looking for?')
      }
      let _0x383852 = (await pinterest(_0x589f9c)) || []
      if (!_0x383852 || !_0x383852[0]) {
        return await _0xf8b0b.send(_0x210608(627))
      }
      var _0x132d25 = {
        ...(await _0xf8b0b[_0x210608(499)].contextInfo(
          Config[_0x210608(504)],
          _0x210608(683)
        )),
      }
      let _0x21ce53 = _0x383852.length < 5 ? _0x383852[_0x210608(578)] : 5
      for (let _0x1af9e9 = 0; _0x1af9e9 < _0x21ce53; _0x1af9e9++) {
        await _0xf8b0b[_0x210608(499)][_0x210608(604)](_0xf8b0b.chat, {
          image: { url: _0x383852[_0x1af9e9] },
          contextInfo: _0x132d25,
        })
      }
    } catch (_0x5c4711) {
      return _0xf8b0b[_0x210608(662)](_0x210608(613))
    }
  }
)
smd(
  {
    pattern: _0x120884(617),
    alias: ['mf', _0x120884(576)],
    desc: 'Downloads media from Mediafire.',
    category: _0x120884(460),
    filename: __filename,
    use: _0x120884(640),
  },
  async (_0x1ccf8b, _0x33d036) => {
    const _0x3a0ab2 = _0x120884
    try {
      let _0x4ae56d = _0x33d036[_0x3a0ab2(443)](_0x3a0ab2(555))
        ? _0x33d036
        : _0x1ccf8b[_0x3a0ab2(659)] || ''
      if (!_0x4ae56d[_0x3a0ab2(443)]('mediafire.com')) {
        return _0x1ccf8b[_0x3a0ab2(662)](
          _0x3a0ab2(427) + prefix + _0x3a0ab2(419)
        )
      }
      let _0x4190c2 = _0x4ae56d[_0x3a0ab2(666)](' ')[0]
      const _0x15a389 = await mediafire(_0x4190c2)
      if (!_0x15a389 || !_0x15a389[0]) {
        return _0x1ccf8b[_0x3a0ab2(662)](_0x3a0ab2(570))
      }
      let _0x504ec3 =
        _0x3a0ab2(514) +
        _0x15a389[0][_0x3a0ab2(520)] +
        _0x3a0ab2(513) +
        _0x15a389[0][_0x3a0ab2(606)] +
        '\n *Mime* : ' +
        _0x15a389[0][_0x3a0ab2(654)] +
        _0x3a0ab2(421) +
        Config[_0x3a0ab2(633)]
      _0x504ec3 = await fancytext(_0x504ec3, 25)
      var _0x227c35 = {
        ...(await _0x1ccf8b[_0x3a0ab2(499)][_0x3a0ab2(517)](
          Config[_0x3a0ab2(504)],
          _0x3a0ab2(652)
        )),
      }
      let _0x33773c = {
        document: { url: _0x15a389[0][_0x3a0ab2(482)] },
        caption: _0x504ec3,
        fileName: _0x15a389[0][_0x3a0ab2(520)],
        mimetype: _0x15a389[0][_0x3a0ab2(654)],
        contextInfo: _0x227c35,
      }
      return await _0x1ccf8b[_0x3a0ab2(499)][_0x3a0ab2(604)](
        _0x1ccf8b[_0x3a0ab2(435)],
        _0x33773c
      )
    } catch (_0x50b778) {
      return _0x1ccf8b[_0x3a0ab2(685)](
        _0x50b778 + '\n\ncommand: mediafire',
        _0x50b778,
        _0x3a0ab2(479)
      )
    }
  }
)
smd(
  {
    pattern: _0x120884(470),
    alias: [_0x120884(491)],
    desc: _0x120884(411),
    category: 'downloader',
    filename: __filename,
    use: _0x120884(493),
  },
  async (_0x2c2023, _0x4ec99f) => {
    const _0x57c666 = _0x120884
    try {
      if (!_0x4ec99f) {
        return await _0x2c2023[_0x57c666(662)]('*_Give Me Search Query_*')
      }
      let _0x3b2ca6 = await yts(_0x4ec99f),
        _0x4123ae = _0x3b2ca6[_0x57c666(653)][0],
        _0x5883a9 =
          _0x57c666(608) +
          _0x4123ae[_0x57c666(597)] +
          _0x57c666(571) +
          _0x4123ae[_0x57c666(527)] +
          _0x57c666(531) +
          _0x4123ae[_0x57c666(561)] +
          _0x57c666(661) +
          _0x4123ae[_0x57c666(554)] +
          _0x57c666(404) +
          _0x4123ae.ago +
          _0x57c666(591) +
          _0x4123ae[_0x57c666(590)][_0x57c666(537)] +
          _0x57c666(546),
        _0x3885cc = await smdBuffer(_0x4123ae[_0x57c666(679)])
      var _0x44a363 = {
        ...(await _0x2c2023.bot[_0x57c666(517)](
          Config[_0x57c666(504)],
          _0x57c666(669),
          _0x3885cc
        )),
      }
      await _0x2c2023[_0x57c666(499)][_0x57c666(604)](_0x2c2023.jid, {
        image: _0x3885cc,
        caption: _0x5883a9,
        contextInfo: _0x44a363,
      })
    } catch (_0x86b411) {
      return _0x2c2023[_0x57c666(685)](
        _0x86b411 + '\n\ncommand: mediafire',
        _0x86b411,
        _0x57c666(479)
      )
    }
  }
)
cmd(
  {
    pattern: _0x120884(668),
    alias: ['yt', _0x120884(474)],
    desc: _0x120884(510),
    category: _0x120884(460),
    filename: __filename,
    use: '<Yt Search Query>',
  },
  async (_0x1c8285, _0xca939c) => {
    const _0x24060f = _0x120884
    try {
      if (!_0xca939c) {
        return await _0x1c8285[_0x24060f(662)](_0x24060f(558))
      }
      let _0x2878ec = await yts(_0xca939c),
        _0x4186e4 =
          '*ʜɪᴛᴅᴇᴠ-ᴍᴅ \u2022 ʏᴏᴜᴛᴜʙᴇ ᴅᴏᴡɴʟᴏᴀᴅ* \n*_______________________________* \n\n_Reply Any Number To Download._\n  _For Audio: 1 mp3._\n  _For Video: 1 video._\n  _For document: 1 document._\n\n_Results For : ' +
          _0xca939c +
          _0x24060f(540),
        _0x463366 = 1
      for (let _0x308e22 of _0x2878ec.all) {
        _0x4186e4 +=
          ' \n*' +
          _0x463366++ +
          _0x24060f(486) +
          _0x308e22.title +
          (_0x308e22[_0x24060f(561)]
            ? '(' + _0x308e22[_0x24060f(561)] + ')'
            : '') +
          _0x24060f(651) +
          _0x308e22[_0x24060f(527)] +
          '*'
      }
      return await _0x1c8285[_0x24060f(604)](
        _0x1c8285[_0x24060f(435)],
        {
          image: { url: _0x2878ec[_0x24060f(653)][0][_0x24060f(679)] },
          caption: _0x4186e4,
        },
        { quoted: _0x1c8285 }
      )
    } catch (_0x5089b0) {}
  }
)
smd(
  {
    pattern: _0x120884(476),
    alias: ['ytv', _0x120884(487), 'ytvideo'],
    desc: _0x120884(535),
    category: _0x120884(460),
    filename: __filename,
    use: '<yt video url>',
  },
  async (_0x1d4717, _0x3716fd) => {
    const _0x188d70 = _0x120884
    let _0x2d4f04 = _0x3716fd ? _0x3716fd : _0x1d4717.reply_text
    var _0x58ceb6 = _0x2d4f04[_0x188d70(461)]()[_0x188d70(443)]('doc')
      ? _0x188d70(495)
      : _0x2d4f04[_0x188d70(461)]()[_0x188d70(443)](_0x188d70(455))
      ? _0x188d70(491)
      : _0x188d70(462)
    const _0x4a3f32 = ytIdRegex[_0x188d70(628)](_0x2d4f04) || []
    if (!_0x2d4f04 || !_0x4a3f32[0]) {
      return await _0x1d4717.reply('*_provide youtube video url!_*')
    }
    try {
      let _0x5c93a9 = await ytdl[_0x188d70(673)](_0x4a3f32[0])
      _0x5c93a9[_0x188d70(407)][_0x188d70(496)] >= videotime &&
        (_0x58ceb6 = _0x188d70(495))
      let _0x1a3a4c = _0x5c93a9.videoDetails[_0x188d70(597)],
        _0x1c86b6 = './temp/' + _0x4a3f32[1] + _0x188d70(417)
      const _0x1f15ef = ytdl(_0x4a3f32[0], {
        filter: (_0x4c0ea7) => _0x4c0ea7.itag == 22 || _0x4c0ea7.itag == 18,
      }).pipe(fs[_0x188d70(623)](_0x1c86b6))
      await new Promise((_0x517788, _0x429bfa) => {
        const _0xbbf3e1 = _0x188d70
        _0x1f15ef.on(_0xbbf3e1(685), _0x429bfa)
        _0x1f15ef.on('finish', _0x517788)
      })
      var _0x3b1bff = {
        ...(await _0x1d4717[_0x188d70(499)][_0x188d70(517)](
          Config.botname,
          _0x188d70(586)
        )),
      }
      let _0x4d676e = {
        [_0x58ceb6]: fs[_0x188d70(438)](_0x1c86b6),
        mimetype: _0x188d70(611),
        fileName: _0x1a3a4c,
        caption: _0x188d70(505) + Config.caption,
        contextInfo: _0x3b1bff,
      }
      await _0x1d4717[_0x188d70(499)].sendMessage(
        _0x1d4717[_0x188d70(428)],
        _0x4d676e,
        { quoted: _0x1d4717 }
      )
      try {
        return await fs[_0x188d70(594)](_0x1c86b6)
      } catch {}
    } catch (_0x15d510) {
      console.log(_0x188d70(538), _0x15d510)
      try {
        let _0x5a46ec = await yt[_0x188d70(673)](_0x4a3f32[1]),
          _0x257939 = {
            type: _0x188d70(462),
            quality: _0x5a46ec.pref_Quality || _0x188d70(414),
            format: _0x188d70(452),
          }
        _0x5a46ec.duration >= videotime && (_0x58ceb6 = _0x188d70(495))
        let _0x588c42 = await yt.download(_0x4a3f32[1], _0x257939)
        var _0x3b1bff = {
          ...(await _0x1d4717.bot[_0x188d70(517)](
            Config.botname,
            _0x188d70(528)
          )),
        }
        let _0x13be6f = _0x5a46ec[_0x188d70(597)] || _0x588c42 || _0x4a3f32[1]
        _0x588c42
          ? await _0x1d4717[_0x188d70(499)][_0x188d70(604)](_0x1d4717.chat, {
              [_0x58ceb6]: { url: _0x588c42 },
              fileName: _0x13be6f,
              mimetype: _0x188d70(611),
              contextInfo: _0x3b1bff,
            })
          : await _0x1d4717[_0x188d70(655)]('*_Video not Found_*')
        try {
          fs.unlinkSync('' + _0x588c42)
        } catch {}
        return
      } catch (_0x363775) {
        return _0x1d4717[_0x188d70(685)](
          _0x363775 + _0x188d70(568),
          _0x363775,
          _0x188d70(549)
        )
      }
    }
  }
)
smd(
  {
    pattern: _0x120884(516),
    alias: [_0x120884(599)],
    desc: _0x120884(619),
    category: _0x120884(460),
    use: '<yt video url>',
  },
  async (_0x3f8930, _0x5834bb) => {
    const _0x32050b = _0x120884
    let _0x4fe91c = _0x5834bb ? _0x5834bb : _0x3f8930[_0x32050b(659)]
    var _0x540f68 = _0x4fe91c[_0x32050b(461)]()[_0x32050b(443)](_0x32050b(639))
      ? 'document'
      : _0x32050b(491)
    const _0x2758ec = ytIdRegex[_0x32050b(628)](_0x4fe91c) || []
    if (!_0x4fe91c || !_0x2758ec[0]) {
      return await _0x3f8930[_0x32050b(662)](_0x32050b(574))
    }
    try {
      let _0x4b5067 = await ytdl.getInfo(_0x2758ec[0])
      _0x4b5067[_0x32050b(407)][_0x32050b(496)] >= videotime &&
        (_0x540f68 = _0x32050b(495))
      let _0xaca4bd = _0x4b5067[_0x32050b(407)][_0x32050b(597)],
        _0x24816a = _0x32050b(472) + _0x2758ec[1] + _0x32050b(478)
      const _0x2591f0 = ytdl(_0x2758ec[0], {
        filter: (_0x4e89f2) =>
          _0x4e89f2[_0x32050b(602)] == 160 || _0x4e89f2[_0x32050b(602)] == 128,
      })[_0x32050b(577)](fs.createWriteStream(_0x24816a))
      await new Promise((_0x401b5b, _0x3d90fd) => {
        const _0x5a6367 = _0x32050b
        _0x2591f0.on(_0x5a6367(685), _0x3d90fd)
        _0x2591f0.on(_0x5a6367(400), _0x401b5b)
      })
      var _0x29af08 = {
        ...(await _0x3f8930.bot[_0x32050b(517)](
          Config[_0x32050b(504)],
          _0x32050b(528)
        )),
      }
      let _0x4c646c = {
        [_0x540f68]: fs.readFileSync(_0x24816a),
        mimetype: 'audio/mpeg',
        fileName: _0xaca4bd,
        contextInfo: _0x29af08,
      }
      await _0x3f8930.bot[_0x32050b(604)](
        _0x3f8930[_0x32050b(428)],
        _0x4c646c,
        { quoted: _0x3f8930 }
      )
      try {
        return await fs[_0x32050b(594)](_0x24816a)
      } catch {}
    } catch (_0x345ce7) {
      console.log('here now,ytdl-core : ', _0x345ce7)
      try {
        let _0x5b9011 = await yt[_0x32050b(485)](_0x2758ec[1], {
          type: _0x32050b(491),
          quality: _0x32050b(414),
        })
        var _0x29af08 = {
          ...(await _0x3f8930[_0x32050b(499)].contextInfo(
            Config[_0x32050b(504)],
            _0x32050b(528)
          )),
        }
        _0x5b9011
          ? await _0x3f8930.bot[_0x32050b(604)](_0x3f8930[_0x32050b(428)], {
              [_0x540f68]: { url: _0x5b9011 },
              mimetype: 'audio/mpeg',
              fileName: Config[_0x32050b(633)],
              contextInfo: _0x29af08,
            })
          : await _0x3f8930.send('*_audio not Found!_*')
        try {
          fs.unlinkSync(_0x5b9011)
        } catch {}
      } catch (_0x2cd979) {
        await _0x3f8930[_0x32050b(685)](
          _0x2cd979 + _0x32050b(437),
          _0x2cd979,
          '*_Uhh dear, audio file not Found!!_*'
        )
      }
    }
  }
)
smd(
  {
    pattern: 'ytdoc',
    alias: [_0x120884(645)],
    desc: _0x120884(396),
    category: _0x120884(460),
    use: '<ytdoc video url>',
  },
  async (_0x17c662, _0x429696) => {
    const _0x1ce02f = _0x120884
    try {
      let _0x5696a7 = _0x429696 ? _0x429696 : _0x17c662[_0x1ce02f(659)]
      const _0x1d542b = ytIdRegex[_0x1ce02f(628)](_0x5696a7) || []
      if (!_0x5696a7 || !_0x1d542b[0]) {
        return await _0x17c662[_0x1ce02f(662)](_0x1ce02f(644))
      }
      var _0x43c5ac = _0x1d542b[1],
        _0x59bbaa = false
      try {
        let _0x32b31a = await ytdl[_0x1ce02f(673)](_0x1d542b[0])
        _0x43c5ac = _0x32b31a.videoDetails.title
        let _0x4b47c3 = _0x1ce02f(682) + _0x1d542b[1] + '.mp3'
        const _0x212389 = ytdl(_0x1d542b[0], {
          filter: (_0xd2371a) =>
            _0xd2371a.audioBitrate == 160 || _0xd2371a.audioBitrate == 128,
        })[_0x1ce02f(577)](fs[_0x1ce02f(623)](_0x4b47c3))
        _0x59bbaa = _0x4b47c3
        await new Promise((_0x1506ab, _0x26e243) => {
          const _0x498a74 = _0x1ce02f
          _0x212389.on(_0x498a74(685), _0x26e243)
          _0x212389.on(_0x498a74(400), _0x1506ab)
        })
      } catch (_0x18c033) {
        console.log(_0x1ce02f(410), _0x18c033)
        try {
          _0x59bbaa = await yt[_0x1ce02f(485)](_0x1d542b[1], {
            type: _0x1ce02f(491),
            quality: 'best',
          })
        } catch (_0x4122cc) {
          return await _0x17c662.error(
            _0x4122cc + _0x1ce02f(430),
            _0x4122cc,
            _0x1ce02f(519)
          )
        }
      }
      if (!_0x59bbaa) {
        return await _0x17c662.send(_0x1ce02f(637))
      }
      var _0x10e2fa = {
        ...(await _0x17c662[_0x1ce02f(499)][_0x1ce02f(517)](
          Config.botname,
          'ʏᴛᴅᴏᴄ ᴍᴘ3 ʏᴏᴜᴛᴜʙᴇ'
        )),
      }
      let _0x300d1a = {
        document: { url: _0x59bbaa },
        mimetype: _0x1ce02f(506),
        fileName: _0x1ce02f(522) + _0x1d542b[1] + '.mp3',
        caption: Config.caption,
        contextInfo: _0x10e2fa,
      }
      await _0x17c662[_0x1ce02f(499)][_0x1ce02f(604)](
        _0x17c662[_0x1ce02f(428)],
        _0x300d1a,
        { quoted: _0x17c662 }
      )
      try {
        return await fs[_0x1ce02f(594)](_0x59bbaa)
      } catch {}
    } catch (_0xbed50) {
      await _0x17c662.error(
        _0xbed50 + '\n\ncommand: ytdoc',
        _0xbed50,
        _0x1ce02f(423)
      )
    }
  }
)
cmd({ on: 'text' }, async (_0xb75e78, _0x221e78, { isCreator: _0xfbeec5 }) => {
  const _0x47aaba = _0x120884
  if (_0xb75e78[_0x47aaba(587)] && _0xb75e78[_0x47aaba(595)]) {
    const _0x5b8ee5 = _0xb75e78.quoted[_0x47aaba(595)].split('\n')
    if (_0x5b8ee5[0][_0x47aaba(443)](_0x47aaba(494))) {
      const _0x1724ba = _0x5b8ee5[_0x47aaba(675)]((_0x525632) =>
        _0x525632[_0x47aaba(398)](_0x47aaba(589))
      )
      let _0x43a95e = _0x1724ba[_0x47aaba(502)](_0x47aaba(589), '')[
        _0x47aaba(563)
      ]()
      try {
        await _0xb75e78[_0x47aaba(604)](_0xb75e78[_0x47aaba(435)], {
          react: {
            text: '\u2728',
            key: _0xb75e78[_0x47aaba(412)],
          },
        })
        let _0x4cd3b2
        if (_0xb75e78[_0x47aaba(595)].startsWith('1')) {
          let _0x3edf2a = _0x221e78[_0x47aaba(461)]()[_0x47aaba(443)]('doc')
            ? 'document'
            : _0x221e78.toLowerCase()[_0x47aaba(443)]('mp3')
            ? _0x47aaba(491)
            : _0x47aaba(462)
          _0x4cd3b2 = _0x47aaba(618)
          const _0x5e7871 = ytdl(_0x43a95e, {
            filter: (_0x145c7e) =>
              _0x145c7e.itag == 22 || _0x145c7e[_0x47aaba(403)] == 18,
          })[_0x47aaba(577)](fs.createWriteStream(_0x4cd3b2))
          await new Promise((_0x540130, _0xf6b8ae) => {
            const _0x4cdf17 = _0x47aaba
            _0x5e7871.on(_0x4cdf17(685), _0xf6b8ae)
            _0x5e7871.on(_0x4cdf17(400), _0x540130)
          })
          await _0xb75e78[_0x47aaba(604)](
            _0xb75e78.chat,
            {
              [_0x3edf2a]: fs[_0x47aaba(438)](_0x4cd3b2),
              mimetype:
                _0x3edf2a == _0x47aaba(491) ? _0x47aaba(506) : _0x47aaba(611),
              fileName: Config[_0x47aaba(633)],
              caption: Config[_0x47aaba(633)],
            },
            { quoted: _0xb75e78 }
          )
        } else {
          if (_0xb75e78[_0x47aaba(595)][_0x47aaba(398)]('2')) {
            let _0x5d9956 = _0x221e78.toLowerCase().includes(_0x47aaba(639))
              ? _0x47aaba(495)
              : _0x47aaba(491)
            _0x4cd3b2 = _0x47aaba(503)
            const _0x39ddb9 = ytdl(_0x43a95e, {
              filter: (_0xa5f832) =>
                _0xa5f832.audioBitrate == 160 ||
                _0xa5f832[_0x47aaba(602)] == 128,
            }).pipe(fs.createWriteStream(_0x4cd3b2))
            await new Promise((_0x4790a8, _0x9a005b) => {
              _0x39ddb9.on('error', _0x9a005b)
              _0x39ddb9.on('finish', _0x4790a8)
            })
            await _0xb75e78[_0x47aaba(604)](
              _0xb75e78[_0x47aaba(435)],
              {
                [_0x5d9956]: fs[_0x47aaba(438)](_0x4cd3b2),
                mimetype: _0x47aaba(506),
                fileName: Config[_0x47aaba(633)],
              },
              { quoted: _0xb75e78 }
            )
          }
        }
        try {
          return fs.unlinkSync(_0x4cd3b2)
        } catch (_0x51cca7) {}
      } catch (_0x189dd8) {
        return await _0xb75e78[_0x47aaba(662)](
          'Error While Downloading Video : ' + _0x189dd8
        )
      }
    } else {
      if (_0x5b8ee5[0][_0x47aaba(443)](_0x47aaba(465))) {
        let _0x307bb6 =
          '*' + _0xb75e78[_0x47aaba(595)].split(' ')[0] + _0x47aaba(486)
        const _0x56275d = _0x5b8ee5[_0x47aaba(675)]((_0x3b5e74) =>
          _0x3b5e74[_0x47aaba(398)](_0x307bb6)
        )
        if (_0x56275d) {
          try {
            let _0x3e1826 = _0x56275d
              .replace(_0x307bb6, '')
              [_0x47aaba(666)]('*')[0]
              [_0x47aaba(563)]()
            const _0x4d9213 =
                _0x5b8ee5[_0x5b8ee5[_0x47aaba(598)](_0x56275d) + 1],
              _0x37a579 = _0x4d9213[_0x47aaba(666)]('*')[1]
                [_0x47aaba(502)](_0x47aaba(489), '')
                [_0x47aaba(563)]()
            if (_0x37a579.startsWith(_0x47aaba(626))) {
              await _0xb75e78[_0x47aaba(604)](_0xb75e78.chat, {
                react: {
                  text: '\u2728',
                  key: _0xb75e78[_0x47aaba(412)],
                },
              })
              let _0x1d3325 = _0x221e78[_0x47aaba(461)]()[_0x47aaba(443)](
                  _0x47aaba(639)
                )
                  ? _0x47aaba(495)
                  : _0x221e78[_0x47aaba(461)]()[_0x47aaba(443)](_0x47aaba(455))
                  ? _0x47aaba(491)
                  : _0x47aaba(462),
                _0x26cc84 =
                  _0x47aaba(624) +
                  Math.floor(Math[_0x47aaba(441)]() * 10000) +
                  '.mp4'
              const _0x104b4c = ytdl(_0x37a579, {
                filter: (_0x31a431) =>
                  _0x31a431.itag == 22 || _0x31a431[_0x47aaba(403)] == 18,
              })[_0x47aaba(577)](fs[_0x47aaba(623)](_0x26cc84))
              await new Promise((_0x45b31c, _0x5b6595) => {
                const _0x160944 = _0x47aaba
                _0x104b4c.on(_0x160944(685), _0x5b6595)
                _0x104b4c.on(_0x160944(400), _0x45b31c)
              })
              await _0xb75e78.sendMessage(
                _0xb75e78[_0x47aaba(435)],
                {
                  [_0x1d3325]: fs[_0x47aaba(438)](_0x26cc84),
                  mimetype:
                    _0x1d3325 == _0x47aaba(491)
                      ? _0x47aaba(506)
                      : _0x47aaba(611),
                  fileName: '' + _0x3e1826,
                  caption: _0x3e1826 + ' \n ' + Config[_0x47aaba(633)],
                },
                { quoted: _0xb75e78 }
              )
              try {
                fs[_0x47aaba(584)](_0x26cc84)
              } catch (_0x338800) {}
            }
          } catch (_0x3de0e2) {
            _0xb75e78[_0x47aaba(685)](
              _0x3de0e2 + _0x47aaba(667),
              _0x3de0e2,
              _0x47aaba(581)
            )
          }
        }
      } else {
        if (_0x5b8ee5[0][_0x47aaba(443)](_0x47aaba(402))) {
          let _0x35d668 =
            '*' + _0xb75e78[_0x47aaba(595)][_0x47aaba(666)](' ')[0] + ' : '
          const _0x205a5f = _0x5b8ee5[_0x47aaba(675)]((_0x304058) =>
            _0x304058[_0x47aaba(398)](_0x35d668)
          )
          if (_0x205a5f) {
            try {
              let _0x17567d = _0x205a5f[_0x47aaba(502)](_0x35d668, '')
                [_0x47aaba(666)]('*')[0]
                [_0x47aaba(563)]()
              const _0x14618c =
                  _0x5b8ee5[_0x5b8ee5[_0x47aaba(598)](_0x205a5f) + 1],
                _0x2407a8 = _0x14618c[_0x47aaba(666)]('*')[1]
                  [_0x47aaba(502)](_0x47aaba(634), '')
                  .trim()
              await _0xb75e78.sendMessage(_0xb75e78[_0x47aaba(435)], {
                react: {
                  text: '\u2728',
                  key: _0xb75e78[_0x47aaba(412)],
                },
              })
              let _0x37b3a4 = await download(_0x2407a8),
                _0x478b37 = _0x47aaba(459) + _0x37b3a4[_0x47aaba(537)]
              _0x478b37 += _0x47aaba(629) + _0x37b3a4[_0x47aaba(542)]
              _0x478b37 += _0x47aaba(674) + _0x37b3a4[_0x47aaba(607)]
              _0x478b37 += _0x47aaba(488) + _0x37b3a4[_0x47aaba(606)]
              _0x478b37 += '\n               \n' + Config.caption
              let _0x5032aa = {
                document: { url: _0x37b3a4[_0x47aaba(529)] },
                mimetype: _0x47aaba(547),
                fileName: _0x37b3a4[_0x47aaba(537)] + '.apk',
                caption: _0x478b37,
              }
              return await _0xb75e78[_0x47aaba(604)](
                _0xb75e78[_0x47aaba(435)],
                _0x5032aa,
                { quoted: _0xb75e78 }
              )
            } catch (_0x12fd88) {
              _0xb75e78[_0x47aaba(662)](_0x47aaba(664))
            }
          }
        }
      }
    }
  }
})
smd(
  {
    pattern: 'playlist',
    desc: 'Downloads video from playlist.',
    category: 'downloader',
    filename: __filename,
    use: '<yt playlist url>',
  },
  async (_0x1283e0, _0x45d2ef, { Void: _0xc34be3 }) => {
    try {
      var _0x3ef119 = _0x45d2ef.toLowerCase().includes('doc')
        ? 'document'
        : _0x45d2ef.toLowerCase().includes('mp3') ||
          _0x45d2ef.toLowerCase().includes('audio')
        ? 'audio'
        : 'video'
      const _0x5c2288 = (_0x5202bc) => {
        return '' + Math.floor(Math.random() * 10000) + _0x5202bc
      }
      if (!_0x45d2ef || !_0x45d2ef.includes('=') || !/http/gi.test(_0x45d2ef)) {
        return await _0x1283e0.reply(
          '*Use Playlist URL, Like: ' +
            prefix +
            'playlist https://www.youtube.com/playlist?list=PLZeei0S6_unh-jTeWsJI1mOI6snxeHn5c*'
        )
      }
      let _0x1c2a7e = _0x45d2ef.split('=')[1].split(' ')[0]
      console.log(_0x1c2a7e)
      var _0x20ebc9 = { listId: _0x1c2a7e }
      yts(_0x20ebc9, async function (_0x594f1f, _0x2548a3) {
        if (_0x594f1f) {
          throw _0x594f1f
        }
        _0x1283e0.reply('This Process will take a bit time.')
        for (
          let _0x1492ac = 0;
          _0x1492ac < _0x2548a3.videos.length;
          _0x1492ac++
        ) {
          if (_0x2548a3.videos[_0x1492ac].videoId === undefined) {
            continue
          }
          let _0xdaf4e3 = _0x2548a3.videos[_0x1492ac].videoId
          try {
            let _0x48a6df = await ytdl.getInfo(_0xdaf4e3)
            _0x48a6df.videoDetails.lengthSeconds >= 2000 &&
              (_0x3ef119 = 'document')
            let _0x5ec28d = _0x48a6df.videoDetails.title,
              _0x1a85a9 = _0x5c2288('.mp4')
            const _0x55ba81 = ytdl(_0xdaf4e3, {
              filter: (_0x1df4a7) =>
                _0x1df4a7.itag == 22 || _0x1df4a7.itag == 18,
            }).pipe(fs.createWriteStream('./temp/' + _0x1a85a9))
            await new Promise((_0x1e87e2, _0x352753) => {
              _0x55ba81.on('error', _0x352753)
              _0x55ba81.on('finish', _0x1e87e2)
            })
            let _0x5e17d6 = fs.statSync('./temp/' + _0x1a85a9),
              _0x1e47e6 = _0x5e17d6.size,
              _0x4a0671 = _0x1e47e6 / 1048576
            if (_0x4a0671 <= 400) {
              let _0x3eab5e = {
                [_0x3ef119]: fs.readFileSync('./temp/' + _0x1a85a9),
                mimetype: _0x3ef119 == 'audio' ? 'audio/mpeg' : 'video/mp4',
                fileName: '' + _0x5ec28d,
                caption:
                  _0x3ef119 == 'document'
                    ? ''
                    : ' \u2FFB Title : ' +
                      _0x5ec28d +
                      '\n \u2FFB File Size : ' +
                      _0x4a0671 +
                      ' MB',
                headerType: 4,
                contextInfo: {
                  externalAdReply: {
                    title: Config.botname,
                    body: _0x1283e0.pushName,
                    thumbnail: log0,
                    renderLargerThumbnail: true,
                    mediaType: 2,
                    mediaUrl: gurl,
                    sourceUrl: gurl,
                  },
                },
              }
              _0xc34be3.sendMessage(_0x1283e0.chat, _0x3eab5e, {
                quoted: _0x1283e0,
              })
            } else {
              _0x1283e0.reply('\u274C File size bigger than ' + 400 + 'mb.')
            }
            try {
              fs.unlinkSync('./temp/' + _0x1a85a9)
            } catch (_0x492195) {}
          } catch (_0x312da2) {
            console.log(_0x312da2)
          }
        }
      })
    } catch (_0x4bcd8f) {
      console.log(_0x4bcd8f)
    }
  }
)
